"""
extract custom tags from strings, used to add instructions to blender objects, tested Godot 4

"""

## this function is quite large and iterates the entire 


static func tag_extract(input_string, open_symbol = '<', close_symbol = '>') -> Array:
    """
    takes an input string which might have many tags like
    "this is<tag> a sentance<end>"
    =>
    ["this is a sentance", "tag", "end"]
    
    the code is larger than a regex version but capable of more, this method could be modified to detect nesting levels 
    
    """
    var nest = 0
    var open_brackets = false
    var text = ""
    var instructions = []
    var bracketed_text = ""
    
    for _char in input_string:
        if _char == open_symbol: ## when we open the brackets
            nest += 1
            if nest == 1:
                open_brackets = true
        elif _char == close_symbol: ## when we close the brackets
            nest -= 1
            if nest == 0:
                open_brackets = false
                instructions.append(bracketed_text)
                bracketed_text = ""
        else:
            if open_brackets:
                bracketed_text += _char
            else:
                text += _char
    return [text] + instructions
    




## shortcut for a quick regex cache
var _regex_cache = {}
func regex_cache(regex: String) -> RegEx:
    if not regex in _regex_cache:
        var regex2 = RegEx.new()
        regex2.compile(regex)
        _regex_cache[regex] = regex2
    return _regex_cache[regex]
    
## tag extract using the regex cache above, find all the things inside tags like "<tag1> hello world <tag2> stuff etc" => ["tag1", "tag2"]
func regex_tag_extract(s: String, open_tag = "<", close_tag = ">"):
    var results: Array[String] = []
    for result in regex_cache("(%s.[^(><.)]+%s)" % [open_tag, close_tag]).search_all(s): # this regex matches inside tags, trying to ignore invalid characters
        var result_string = result.get_string()
        results.push_back(result_string.substr(1,result_string.length() - 2)) # chop off the brackets for the return result
    return results
